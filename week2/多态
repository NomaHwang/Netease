和c++中不同，java要实现多态的话，不需要将基类方法声明为virtual。默认就是动态绑定的方式。
对于private方法、static方法、final方法和构造器，是静态绑定。因为private方法子类无法继承，static方法是类方法，没有this隐式参数指向类对象。final方法不允许这个方法被继承。

final关键字：

	1. final类，这个类不能被继承，final类中的方法自动变成final方法，但是不包括变量。
	2. final方法，子类中不能重写（覆盖）这个方法
	3. final域，构造对象后这个域的值就不能再改变了


子类对象强制类型转换为父类对象，需要先用instanceof运算符判断是否可以转型。类似于c++里的dynamic_cast<BaseType*>
if(BaseObj instanceof DerivedType){
     derivedObj = (DerivedType) BaseObj; 
}
abstract关键字：
抽象类，包含一个或多个抽象方法，除了抽象方法外，还可以包含具体的数据和方法。
对于抽象类的子类，如果只具体定义部分或不定义抽象父类中声明的的抽象方法，那么还是抽象类，还要加abstract关键字。只有完全定义了父类中的抽象方法，才不是抽象类。

和c++中的纯虚函数对应
在c++中，如果声明一个方法时，尾部标记了=0，就表明是一个纯虚函数。有纯虚函数的类就是抽象类。并没有关键词来表示。

java中的访问修饰符：

	1. public: 对所有类可见
	2. private:只对本类可见
	3. protected：对本包和子类可见
	4. 默认：对本包可见

